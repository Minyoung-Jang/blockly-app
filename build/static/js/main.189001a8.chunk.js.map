{"version":3,"sources":["App.js","Blockly/BlocklyComponent.jsx","Blockly/index.js","generator/generator.js","widgets/dialog.js","blocks/start_block.js","blocks/wait_block.js","blocks/infinite_loop_block.js","blocks/break_block.js","blocks/not_block.js","blocks/bool_block.js","blocks/compare_block.js","blocks/and_or_block.js","serviceWorker.js","index.js"],"names":["App","props","generateCode","console","log","simpleWorkspace","codeList","BlocklyJS","workspaceToCode","current","workspace","split","code","includes","eval","React","createRef","className","style","display","id","onClick","this","readOnly","trashcan","media","ref","move","scrollbars","drag","wheel","renderer","initialXml","name","colour","type","custom","Component","Blockly","setLocale","locale","BlocklyComponent","blocklyDiv","toolbox","rest","children","primaryWorkspace","inject","theme","Xml","domToWorkspace","textToDom","addChangeListener","event","xml","Fragment","xmlns","is","Block","p","createElement","Category","Value","Field","Shadow","block","getField","getText","CustomDialog","alert","message","callback","show","onCancel","confirm","showOkay","onOkay","showCancel","prompt","defaultValue","showInput","inputField","value","hide","backdropDiv_","dialogDiv_","title","options","backdropDiv","dialogDiv","document","cssText","body","appendChild","onclick","stopPropagation","innerHTML","dialogInput","getElementById","focus","onkeyup","keyCode","okay","addEventListener","isAble","startBlock","init","jsonInit","setColour","toLocaleString","disabled","onchange","element","waitBlock","second","getFieldValue","infiniteLoopBlock","statement","getInputTargetBlock","blockCode","blockToCode","breakBlock","notBlock","setOutput","boolBlock","compareBlock","andOrBlock","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.189001a8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport BlocklyComponent, { Block, Value, Field, Shadow, Category } from './Blockly';\n\nimport BlocklyJS from 'blockly/javascript';\nimport './blocks/customblocks';\nimport './generator/generator';\nimport './widgets/dialog.js'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.simpleWorkspace = React.createRef();\n  }\n\n  generateCode = () => {\n    console.log(this.simpleWorkspace);\n    var codeList = BlocklyJS.workspaceToCode(\n      this.simpleWorkspace.current.workspace\n    );\n\n    for (var code of codeList.split(\"\\n\\n\")) {\n      console.log(code);\n      if (code.includes(\"//Start\\n\")) {\n        eval(code);\n      }\n    }\n    // var msg = new SpeechSynthesisUtterance();\n    // msg.text = \"안녕하세요\";\n    // window.speechSynthesis.speak(msg);\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={{ display: 'flex' }}>\n        <div id=\"box\">\n        </div>\n        <div id=\"box1\">\n          <div id=\"column\">\n            <div id=\"subtitle\">PROJECT NAME</div>\n            <div id=\"title\">인공지능 홈</div>\n          </div>\n          <button id=\"codeButton\" onClick={this.generateCode}> START </button>\n        </div>\n        <BlocklyComponent\n          readOnly={false} trashcan={true} media={'media/'}\n          ref={this.simpleWorkspace}\n          move={{\n            scrollbars: true,\n            drag: true,\n            wheel: true,\n          }}\n          renderer={'zelos'}\n          initialXml={`\n              <xml xmlns=\"http://www.w3.org/1999/xhtml\">\n              </xml>\n            `}>\n          <Category name=\"시작\" colour=\"#5AA8DF\">\n            <Block type=\"start_block\" />\n          </Category>\n          <Category name=\"흐름\" colour=\"#A43033\">\n            <Block type=\"wait_block\" />\n            <Block type=\"controls_repeat_ext\">\n              <Value name=\"TIMES\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">10</Field>\n                </Shadow>\n              </Value>\n            </Block>\n            <Block type=\"infinite_loop\" />\n            <Block type=\"break_loop\" />\n            <Block type=\"controls_if\" />\n          </Category>\n          <Category name=\"자료\" colour=\"#E99F38\" custom=\"VARIABLE\"></Category>\n          <Category name=\"연산\" colour=\"#7AB964\">\n            <Block type=\"math_arithmetic\">\n              <Value name=\"A\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">1</Field>\n                </Shadow>\n              </Value>\n              <Value name=\"B\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">1</Field>\n                </Shadow>\n              </Value>\n            </Block>\n            <Block type=\"compare_block\">\n              <Value name=\"A\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">1</Field>\n                </Shadow>\n              </Value>\n              <Value name=\"B\">\n                <Shadow type=\"math_number\">\n                  <Field name=\"NUM\">1</Field>\n                </Shadow>\n              </Value>\n            </Block>\n            <Block type=\"and_or_block\" >\n            <Value name=\"A\">\n                <Block type=\"boolean_block\">\n                  <Field name=\"BOOL\">TRUE</Field>\n                </Block>\n              </Value>\n              <Value name=\"B\">\n                <Block type=\"boolean_block\">\n                  <Field name=\"BOOL\">TRUE</Field>\n                </Block>\n              </Value>\n            </Block>\n            <Block type=\"not_block\">\n              <Value name=\"BOOL\">\n                <Block type=\"boolean_block\">\n                  <Field name=\"BOOL\">TRUE</Field>\n                </Block>\n              </Value>\n            </Block>\n          </Category>\n          <Category name=\"스마트홈\" colour=\"#AE76F5\"></Category>\n          {/* <Block type=\"text_print\">\n            <Value name=\"TEXT\">\n              <Shadow type=\"text\">\n                <Field name=\"TEXT\">abc</Field>\n              </Shadow>\n            </Value>\n          </Block>\n          <Block type=\"variables_get\" />\n          <Block type=\"controls_repeat_ext\">\n            <Value name=\"TIMES\">\n              <Shadow type=\"math_number\">\n                <Field name=\"NUM\">10</Field>\n              </Shadow>\n            </Value>\n          </Block>\n          <Block type=\"controls_ifelse\" />\n          <Block type=\"logic_compare\" />\n          <Block type=\"logic_operation\" />\n          <Block type=\"logic_operation\" />\n          <Block type=\"logic_negate\" />\n          <Block type=\"text_print\">\n            <Value name=\"TEXT\">\n              <Shadow type=\"text\">\n                <Field name=\"TEXT\">abc</Field>\n              </Shadow>\n            </Value>\n          </Block>\n          <Block type=\"logic_null\" disabled=\"false\" />\n          <Block type=\"logic_ternary\" />\n          <Block type=\"text_charAt\">\n            <Value name=\"VALUE\">\n              <Block type=\"variables_get\">\n                <Field name=\"VAR\">text</Field>\n              </Block>\n            </Value>\n          </Block> */}\n\n        </BlocklyComponent>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './BlocklyComponent.css';\n\nimport Blockly from 'blockly/core';\nimport locale from 'blockly/msg/ko';\nimport BlocklyJS from 'blockly/javascript';\nimport 'blockly/blocks';\n\nBlockly.setLocale(locale);\n\nclass BlocklyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.blocklyDiv = React.createRef();\n        this.toolbox = React.createRef();\n    }\n\n    componentDidMount() {\n        const { initialXml, children, ...rest } = this.props;\n\n        this.primaryWorkspace = Blockly.inject(\n            this.blocklyDiv.current,\n            {\n                toolbox: this.toolbox.current,\n                theme: {\n                    'blockStyles': {\n                        \"loop_blocks\": {\n                            \"colourPrimary\": \"#A43033\",\n                            \"colourSecondary\": \"#FEAFB1\",\n                        },\n                        \"logic_blocks\": {\n                            \"colourPrimary\": \"#A43033\",\n                            \"colourSecondary\": \"#FEAFB1\",\n                        },\n                        \"text_blocks\": {\n                            \"colourPrimary\": \"#7AB964\",\n                            \"colourSecondary\": \"#BEDAB4\",\n                        },\n                        \"math_blocks\": {\n                            \"colourPrimary\": \"#7AB964\",\n                            \"colourSecondary\": \"#BEDAB4\",\n                        },\n                        \"variable_blocks\": {\n                            \"colourPrimary\": \"#E99F38\",\n                            \"colourSecondary\": \"#EFC78F\",\n                        },\n                    },\n                    'componentStyles': {\n                        'workspaceBackgroundColour': '#F7F7FB',\n                        'toolboxBackgroundColour': '#4C536D',\n                        'flyoutBackgroundColour': '#4C536D99'\n                    },\n                },\n\n                ...rest\n            },\n        );\n\n\n        if (initialXml) {\n            Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(initialXml), this.primaryWorkspace);\n        }\n\n        \n        var code = BlocklyJS.workspaceToCode(this.primaryWorkspace);\n        \n        function myUpdateFunction(event) {\n            console.log(code);\n        }\n        this.primaryWorkspace.addChangeListener(myUpdateFunction);\n    }\n\n    get workspace() {\n        return this.primaryWorkspace;\n    }\n\n    setXml(xml) {\n        Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml), this.primaryWorkspace);\n    }\n\n    render() {\n        const { children } = this.props;\n\n        return <React.Fragment>\n            <div ref={this.blocklyDiv} id=\"blocklyDiv\" />\n            <xml xmlns=\"https://developers.google.com/blockly/xml\" is=\"blockly\" style={{ display: 'none' }} ref={this.toolbox}>\n                {children}\n            </xml>\n        </React.Fragment>;\n    }\n}\n\nexport default BlocklyComponent;\n","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview XML wrappers for block, category, value, field and shadow.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n import React from 'react';\nimport BlocklyComponent from './BlocklyComponent';\n\nexport default BlocklyComponent;\n\nconst Block = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"block\", props, children);\n};\n\nconst Category = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"category\", props, children);\n};\n\nconst Value = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"value\", props, children);\n};\n\nconst Field = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"field\", props, children);\n};\n\nconst Shadow = (p) => {\n    const { children, ...props } = p;\n    props.is = \"blockly\";\n    return React.createElement(\"shadow\", props, children);\n};\n\nexport { Block, Category, Value, Field, Shadow }","/**\n * @license\n * \n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define generation methods for custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on generating code:\n// https://developers.google.com/blockly/guides/create-custom-blocks/generating-code\n\nimport * as Blockly from 'blockly/core';\nimport 'blockly/javascript';\n\nBlockly.JavaScript['test_react_field'] = function (block) {\n    return 'console.log(\\'custom block\\');\\n';\n};\n\nBlockly.JavaScript['test_react_date_field'] = function (block) {\n    return 'console.log(' + block.getField('DATE').getText() + ');\\n';\n};\n","import Blockly from 'blockly/core';\nimport 'blockly/blocks';\n\nclass CustomDialog {};\n\n/** Override Blockly.alert() with custom implementation. */\nBlockly.alert = function(message, callback) {\n    console.log('Alert: ' + message);\n    CustomDialog.show('Alert', message, {\n        onCancel: callback\n    });\n};\n\n/** Override Blockly.confirm() with custom implementation. */\nBlockly.confirm = function(message, callback) {\n    console.log('Confirm: ' + message);\n    CustomDialog.show('Confirm', message, {\n        showOkay: true,\n        onOkay: function() {\n            callback(true);\n        },\n        showCancel: true,\n        onCancel: function() {\n            callback(false);\n        }\n    });\n};\n\n/** Override Blockly.prompt() with custom implementation. */\nBlockly.prompt = function(message, defaultValue, callback) {\n    console.log('Prompt: ' + message);\n    CustomDialog.show('변수 만들기', message, {\n        showInput: true,\n        showOkay: true,\n        onOkay: function() {\n            callback(CustomDialog.inputField.value);\n        },\n        showCancel: true,\n        onCancel: function() {\n            callback(null);\n        }\n    });\n    CustomDialog.inputField.value = defaultValue;\n};\n\n/** Hides any currently visible dialog. */\nCustomDialog.hide = function() {\n    if (CustomDialog.backdropDiv_) {\n        CustomDialog.backdropDiv_.style.display = 'none';\n        CustomDialog.dialogDiv_.style.display = 'none';\n    }\n};\n\n/**\n * Shows the dialog.\n * Allowed options:\n *  - showOkay: Whether to show the OK button.\n *  - showCancel: Whether to show the Cancel button.\n *  - showInput: Whether to show the text input field.\n *  - onOkay: Callback to handle the okay button.\n *  - onCancel: Callback to handle the cancel button and backdrop clicks.\n */\nCustomDialog.show = function(title, message, options) {\n    var backdropDiv = CustomDialog.backdropDiv_;\n    var dialogDiv = CustomDialog.dialogDiv_;\n    if (!dialogDiv) {\n        // Generate HTML\n        backdropDiv = document.createElement('div');\n        backdropDiv.id = 'customDialogBackdrop';\n        backdropDiv.style.cssText =\n            'position: absolute;' +\n            'top: 0; left: 0; right: 0; bottom: 0;' +\n            'background-color: rgba(0, 0, 0, .7);' +\n            'z-index: 100;';\n        document.body.appendChild(backdropDiv);\n\n        dialogDiv = document.createElement('div');\n        dialogDiv.id = 'customDialog';\n        dialogDiv.style.cssText =\n            'display: flex;' +\n            'flex-direction: column;' +\n            'max-width: 361px;' +\n            'justify-content: center;' +\n            'border-radius: 10px;' +\n            'align-items: center;' +\n            'padding-top: 10px;' +\n            // 'padding-bottom: 10px;' +\n            'padding-right: 30px;' +\n            'padding-left: 30px;' +\n            'background-color: rgba(247, 247, 251, 1);' +\n            'margin-right: auto;' +\n            'margin-left: auto;' +\n            'margin-top: 80px;';\n        backdropDiv.appendChild(dialogDiv);\n\n        dialogDiv.onclick = function(event) {\n            event.stopPropagation();\n        };\n\n        CustomDialog.backdropDiv_ = backdropDiv;\n        CustomDialog.dialogDiv_ = dialogDiv;\n    }\n    backdropDiv.style.display = 'block';\n    dialogDiv.style.display = 'block';\n\n    dialogDiv.innerHTML =\n        '<div style=\"display : flex; flex-direction: column;\">' +\n        '<div class=\"customDialogTitle\" style=\"' +\n        'color: rgba(99, 125, 220, 1);' +\n        'font-size: 14px;' +\n        'letter-spacing: 0%;' +\n        'padding: 14px;' +\n        'text-align: center;' +\n        'font-weight: bold;' +\n        'border-bottom: 1px solid #D8D8D8;' +\n        'font-family: Noto Sans KR, sans-serif;' +\n        '\">변수만들기</div>' +\n        '<div class=\"customDialogMessage\" style=\"' +\n        'margin-top: 10px;' +\n        'color: rgba(73, 73, 73, 1);' +\n        'font-size: 10px;' +\n        'font-weight: bold;' +\n        'letter-spacing: 0%;' +\n        'text-align: left;' +\n        'margin-top: 16px;' +\n        'font-family: Noto Sans KR, sans-serif;' +\n        '\">새 변수 이름 :</div>' +\n        (options.showInput ? '<input id=\"customDialogInput\" style=\"' +\n            'height: 30px;' +\n            'width: 100%;' +\n            'margin-top: 10px;' +\n            'border-radius: 5px;' +\n            'border-color: rgba(211, 211, 211, 1);' +\n            'border-width: 1px;' +\n            'align-self: center;' +\n            'border-style: solid;' +\n            'background-color: rgba(255, 255, 255, 1);' +\n            '\">' : '') +\n        // '<div class=\"customDialogButtons\">' +\n        (options.showOkay ? '<button id=\"okay\" style=\"' +\n            ' display: flex;' +\n            'flex-direction: row;' +\n            'justify-content: center;' +\n            'margin-top: 20px;' +\n            'border-radius: 17.5px;' +\n            'align-self: center;' +\n            'padding-top: 7px;' +\n            'padding-bottom: 7px;' +\n            'padding-right: 30px;' +\n            'width: 106px;' +\n            'padding-left: 30px;' +\n            'background-color: rgba(99, 125, 220, 1);' +\n            'color: rgba(255, 255, 255, 1);' +\n            'font-size: 12px;' +\n            'border: none;' +\n            'letter-spacing: 0%;' +\n            'font-family: Noto Sans KR, sans-serif;' +\n            '\">생성하기</button>' : '') +\n        (options.showCancel ? '<button id=\"cancel\" style=\"' +\n            'margin-top: 10px;' +\n            'margin-bottom: 20px;' +\n            'background-color: inherit;' +\n            'color: rgba(166, 166, 166, 1);' +\n            'font-size: 10px;' +\n            'letter-spacing: 0%;' +\n            'border: none;' +\n            'text-align: center;' +\n            'font-family: Noto Sans KR, sans-serif;' +\n            '\">취소</button>' : '') +\n        '</div>';\n\n    var onOkay = function(event) {\n        CustomDialog.hide();\n        options.onOkay && options.onOkay();\n        event && event.stopPropagation();\n    };\n    var onCancel = function(event) {\n        CustomDialog.hide();\n        options.onCancel && options.onCancel();\n        event && event.stopPropagation();\n    };\n\n    var dialogInput = document.getElementById('customDialogInput');\n    CustomDialog.inputField = dialogInput;\n    if (dialogInput) {\n        dialogInput.focus();\n\n        dialogInput.onkeyup = function(event) {\n            if (event.keyCode === 13) {\n                // Process as OK when user hits enter.\n                onOkay();\n                return false;\n            } else if (event.keyCode === 27) {\n                // Process as cancel when user hits esc.\n                onCancel();\n                return false;\n            }\n        };\n    } else {\n        var okay = document.getElementById('okay');\n        okay && okay.focus();\n    }\n\n    if (options.showOkay) {\n        document.getElementById('okay')\n            .addEventListener('click', onOkay);\n    }\n    if (options.showCancel) {\n        document.getElementById('cancel')\n            .addEventListener('click', onCancel);\n    }\n\n    backdropDiv.onclick = onCancel;\n};","import * as Blockly from 'blockly/core';\n\nlet isAble = false;\n\nvar startBlock = {\n    \"type\": \"start_block\",\n    \"message0\": \"▶︎ 시작\",\n    \"nextStatement\": true,\n};\n\nBlockly.JavaScript['start_block'] = function() {\n    var code = '//Start\\n';\n    return code;\n};\n\nBlockly.Blocks['start_block'] = {\n    init: function() {\n        this.jsonInit(startBlock);\n        this.setColour(\"#5AA8DF\");\n        this.toLocaleString('ko');\n        this.disabled = isAble;\n    },\n    onchange: function(event) {\n\n        if (`${event.element}` === 'dragStop' && this.type === \"start_block\") {\n            isAble = true;\n        }\n        if (`${event.element}` === 'dragStart' && this.type === \"start_block\") {\n            isAble = false;\n        }\n    }\n};","import * as Blockly from 'blockly/core';\n\nvar waitBlock = {\n    \"type\": \"wait_block\",\n    \"message0\": \"%1초 기다리기\",\n    \"args0\": [{\n        \"type\": \"field_number\",\n        \"name\": \"duration\",\n        \"value\": 1,\n    }, ],\n    \"nextStatement\": null,\n    \"previousStatement\": null,\n};\n\nBlockly.JavaScript['wait_block'] = function(block) {\n    var second = block.getFieldValue(\"duration\");\n\n    var code =\n        `const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < ${second}000);\\n`;\n    return code;\n};\n\nBlockly.Blocks['wait_block'] = {\n    init: function() {\n        this.jsonInit(waitBlock);\n        this.setColour(\"#A43033\");\n        this.toLocaleString('ko');\n    },\n};","import * as Blockly from 'blockly/core';\n\nvar infiniteLoopBlock = {\n    \"type\": \"infinite_loop\",\n    \"message0\": \"계속 반복하기 %1 %2\",\n    \"args0\": [{\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"INFINITE\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"tooltip\": \"무한 루프 블럭\",\n};\n\nBlockly.JavaScript['infinite_loop'] = function(block) {\n    var statement = block.getInputTargetBlock('INFINITE');\n    var blockCode = Blockly.JavaScript.blockToCode(statement);\n    var code =\n        `while(true){\n      ${blockCode}\n    }\\n`;\n    return code;\n};\n\nBlockly.Blocks['infinite_loop'] = {\n    init: function() {\n        this.jsonInit(infiniteLoopBlock);\n        this.setColour(\"#A43033\");\n        this.toLocaleString('ko');\n    },\n};","import * as Blockly from 'blockly/core';\n\nvar breakBlock = {\n    \"type\": \"break_loop\",\n    \"message0\": \"반복 중단하기\",\n    \"previousStatement\": null,\n    \"tooltip\": \"루프 나오기\",\n};\n\nBlockly.JavaScript['break_loop'] = function(block) {\n    var code =\n        `break;\\n`;\n    return code;\n};\n\nBlockly.Blocks['break_loop'] = {\n    init: function() {\n        this.jsonInit(breakBlock);\n        this.setColour(\"#A43033\");\n        this.toLocaleString('ko');\n    },\n};","import * as Blockly from 'blockly/core';\n\nvar notBlock = {\n    \"type\": \"not_block\",\n    \"message0\": \"%1 아니다\",\n    \"args0\": [{\n        \"type\": \"input_value\",\n        \"name\": \"BOOL\",\n        \"check\": \"Boolean\"\n    }],\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n};\n\nBlockly.JavaScript['not_block'] = function(block) {\n    var code =\n        `break;\\n`;\n    return code;\n};\n\nBlockly.Blocks['not_block'] = {\n    init: function() {\n        this.jsonInit(notBlock);\n        this.setColour(\"#7AB964\");\n        this.setOutput(true, 'Boolean');\n        this.toLocaleString('ko');\n    },\n};","import * as Blockly from 'blockly/core';\n\nvar boolBlock = {\n    \"type\": \"boolean_block\",\n    \"message0\": \"%1\",\n    \"args0\": [{\n        \"type\": \"field_dropdown\",\n        \"name\": \"BOOL\",\n        \"options\": [\n            [\n                \"참\",\n                \"TRUE\"\n            ],\n            [\n                \"거짓\",\n                \"FALSE\"\n            ]\n        ]\n    }],\n    \"inputsInline\": false,\n    \"output\": null,\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n};\n\nBlockly.JavaScript['boolean_block'] = function(block) {\n    var code =\n        `break;\\n`;\n    return code;\n};\n\nBlockly.Blocks['boolean_block'] = {\n    init: function() {\n        this.jsonInit(boolBlock);\n        this.setColour(\"#7AB964\");\n        this.setOutput(true, 'Boolean');\n        this.toLocaleString('ko');\n    },\n};","import * as Blockly from 'blockly/core';\n\nvar compareBlock = {\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [{\n            \"type\": \"field_input\",\n            \"name\": \"A\",\n            \"text\": \"1\",\n            \"output\": \"Number\",\n        },\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"COMPARE\",\n            \"options\": [\n                [\n                    \"<\",\n                    \"<\"\n                ],\n                [\n                    \">\",\n                    \">\"\n                ],\n                [\n                    \">=\",\n                    \">=\"\n                ],\n                [\n                    \"<=\",\n                    \"<=\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"field_input\",\n            \"name\": \"B\",\n            \"text\": \"1\",\n            \"output\": \"Number\",\n        }\n    ],\n    \"inputsInline\": false,\n    \"output\": \"Boolean\",\n    \"colour\": 230,\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n};\n\nBlockly.JavaScript['compare_block'] = function(block) {\n    var code =\n        `break;\\n`;\n    return code;\n};\n\nBlockly.Blocks['compare_block'] = {\n    init: function() {\n        this.jsonInit(compareBlock);\n        this.setColour(\"#7AB964\");\n        this.setOutput(true, 'Boolean');\n        this.toLocaleString('ko');\n    },\n};","import * as Blockly from 'blockly/core';\n\nvar andOrBlock = {\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [{\n            \"type\": \"input_value\",\n            \"name\": \"A\",\n            \"check\": \"Boolean\",\n            \"output\": \"Boolean\",\n        },\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"COMPARE\",\n            \"options\": [\n                [\n                    \"그리고\",\n                    \"AND\"\n                ],\n                [\n                    \"또는\",\n                    \"OR\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"B\",\n            \"check\": \"Boolean\",\n            \"output\": \"Boolean\",\n        },\n    ],\n    \"output\": \"Boolean\",\n    \"inputsInline\": true,\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n};\n\nBlockly.JavaScript['and_or_block'] = function(block) {\n    var code =\n        `break;\\n`;\n    return code;\n};\n\nBlockly.Blocks['and_or_block'] = {\n    init: function() {\n        this.jsonInit(andOrBlock);\n        this.setColour(\"#7AB964\");\n        this.setOutput(true, 'Boolean');\n        this.toLocaleString('ko');\n    },\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}